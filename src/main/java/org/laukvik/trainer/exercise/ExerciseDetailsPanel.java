package org.laukvik.trainer.exercise;import java.awt.BorderLayout;import java.awt.Dimension;import java.awt.GridLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.net.URL;import java.util.Locale;import javax.swing.BorderFactory;import javax.swing.Icon;import javax.swing.ImageIcon;import javax.swing.JPanel;import javax.swing.event.CaretEvent;import javax.swing.event.CaretListener;import org.laukvik.swing.locale.LocaleListener;import org.laukvik.trainer.anatomy.Human;import org.laukvik.trainer.anatomy.muscle.Muscle;import org.laukvik.trainer.muscle.MuscleComboBox;import org.laukvik.trainer.swing.DroppableIcon;import org.laukvik.trainer.swing.IconDroppedListener;import org.laukvik.trainer.swing.JournalHelper;/** * * @author  morten */public class ExerciseDetailsPanel extends javax.swing.JPanel implements CaretListener, ActionListener, IconDroppedListener, LocaleListener {	private static final long serialVersionUID = 1L;	private Exercise exercise; 	private ExerciseEditorDialog exerciseEditorPanel;	private JPanel panel1, panel2;    public ExerciseDetailsPanel( ExerciseEditorDialog exerciseEditorDialog, int a ) {    	super();    	if (exerciseEditorDialog == null){    		throw new IllegalArgumentException("ExerciseEditorPanel cant be null!");    	}    	this.exerciseEditorPanel = exerciseEditorDialog;        initComponents();        setListenersEnabled( true );    }    	public void localeChanged(Locale locale) {		setLocale( locale );		droppableIcon.setNoImage( JournalHelper.getLanguage( getLocale(), "exercise.dropiconfilehere") );        enabledCheckbox.setText( JournalHelper.getLanguage( getLocale(), "exercise.enabled") );        jLabelExercise.setText( JournalHelper.getLanguage( getLocale(), "exercise") );        jLabelMuscle.setText( JournalHelper.getLanguage( getLocale(), "exercise.muscle") );        jLabelComments.setText( JournalHelper.getLanguage( getLocale(), "exercise.notes") );	}    	public void emptyValues() {		setListenersEnabled( false );    	jTextFieldName.setText(null);    	droppableIcon.setNoImage();     	jComboBoxMuscle.setSelectedIndex( 0 );    	jTextAreaComments.setText(null);    	enabledCheckbox.setEnabled( false );    	enabledCheckbox.setSelected( false );	}	public void iconRemoved(){		exercise.setIcon( null );		fireExerciseChanged( exercise );	}	public void iconChanged( Icon icon, URL url ) {		exercise.setIcon( (ImageIcon) icon, url );		fireExerciseChanged( exercise );	}    	public void actionPerformed(ActionEvent e) {		if (e.getSource() == enabledCheckbox){			exercise.setEnabled( enabledCheckbox.isSelected() );					} else if (e.getSource() == jComboBoxMuscle){			Muscle from = exercise.getMuscle();			Muscle to = (Muscle) jComboBoxMuscle.getSelectedItem();			exercise.setMuscle( to );			fireExerciseMuscleChanged( exercise, from, to );			}	}		public void fireExerciseMuscleChanged( Exercise exercise2, Muscle from, Muscle to ){		setListenersEnabled( false );		exerciseEditorPanel.exerciseMuscleChanged( exercise, from, to );		setListenersEnabled( false );	}        public void setEnabled(boolean enabled) {    	super.setEnabled(enabled);    	jTextFieldName.setEnabled(enabled);    	jComboBoxMuscle.setEnabled(enabled);    	jTextAreaComments.setEnabled(enabled);    	jScrollPane1.setEnabled(enabled);    	enabledCheckbox.setEnabled(enabled);    	    	jLabelComments.setEnabled(enabled);    	jLabelExercise.setEnabled(enabled);    	jLabelMuscle.setEnabled(enabled);    	droppableIcon.setEnabled(enabled);    }        public void setListenersEnabled( boolean enabled ){    	if (enabled){          jTextFieldName.addCaretListener( this );           jComboBoxMuscle.addActionListener( this );          jTextAreaComments.addCaretListener( this );          droppableIcon.addIconListener( this );          enabledCheckbox.addActionListener( this );    	} else {          jTextFieldName.removeCaretListener( this );           jComboBoxMuscle.removeActionListener( this );          jTextAreaComments.removeCaretListener( this );          droppableIcon.removeIconListener( this );          enabledCheckbox.removeActionListener( this );    	}    }        public void fireExerciseChanged( Exercise exercise ){    	if (exercise == null){    		    	} else {            setListenersEnabled( false );	  		exercise.setName( jTextFieldName.getText() );	  		exercise.setMuscle( (Muscle) jComboBoxMuscle.getSelectedItem() );	  		exercise.setNotes( jTextAreaComments.getText() );	  		exercise.setOriginalIcon( droppableIcon.getURL() );	  		exerciseEditorPanel.exerciseChanged( exercise );	  		setListenersEnabled( true );    	}    }    	public void caretUpdate(CaretEvent e) {		fireExerciseChanged( exercise );	}    	public void log( Object message ){		System.out.println( this.getClass().getName() + ": "+ message );	}	    public void setExercise(Exercise exercise) {    	    	setListenersEnabled( false );		this.exercise = exercise;		enabledCheckbox.setEnabled( exercise != null );		if (exercise == null){			jTextFieldName.setText( "" );			droppableIcon.setNoImage();			jComboBoxMuscle.setSelectedItem( Human.BODY.listAllMuscles()[0] ); 			/** TODO - SETT TILBAKE FOR F*/			jTextAreaComments.setText( "" );			enabledCheckbox.setSelected( false );					} else {			log( "setExercise: " + exercise.getOriginalIcon() );			jTextFieldName.setText( exercise.getName() );			if (exercise.getIcon() == null){				droppableIcon.setNoImage();				droppableIcon.setURL( null );			} else {				droppableIcon.setIcon( exercise.getIcon(), exercise.getOriginalIcon() );			}						jComboBoxMuscle.setSelectedItem( exercise.getMuscle() );			jTextAreaComments.setText( exercise.getNotes() );			enabledCheckbox.setSelected( exercise.isEnabled() );						setEnabled( exercise.getAuthorID() == exercise.getJournal().getAuthorID() );		}		setListenersEnabled( true );	}        public Exercise getExercise() {		return exercise;	}        /** This method is called from within the constructor to     * initialize the form.     * WARNING: Do NOT modify this code. The content of this method is     * always regenerated by the Form Editor.     */    private void initComponents() {    	setLocale( JournalHelper.getDefaultLocale() );        setLayout( new BorderLayout() );        setBorder( BorderFactory.createEmptyBorder( 10,10,10,10 ) );                jLabelExercise = new javax.swing.JLabel();        jTextFieldName = new javax.swing.JTextField();        jLabelMuscle = new javax.swing.JLabel();        jComboBoxMuscle = new MuscleComboBox( getLocale() );        jScrollPane1 = new javax.swing.JScrollPane();        jTextAreaComments = new javax.swing.JTextArea();        jTextAreaComments.setLineWrap( true );        jTextAreaComments.setWrapStyleWord( true );        jLabelComments = new javax.swing.JLabel();        droppableIcon = new DroppableIcon( JournalHelper.getLanguage( getLocale(), "exercise.dropiconfilehere") );        droppableIcon.setMinimumSize( new Dimension(100,100) );        droppableIcon.setMaximumSize( new Dimension(100,100) );        enabledCheckbox = new javax.swing.JCheckBox("Enabled");        enabledCheckbox.setMaximumSize( new Dimension(10000,32) );        jLabelExercise.setText( JournalHelper.getLanguage( getLocale(), "exercise") );        jLabelMuscle.setText( JournalHelper.getLanguage( getLocale(), "exercise.muscle") );        jScrollPane1.setViewportView(jTextAreaComments);        jLabelComments.setText( JournalHelper.getLanguage( getLocale(), "exercise.notes") );        JPanel panel1left = new JPanel();        panel1left.setPreferredSize( new Dimension(300,100) );        panel1left.setLayout( new GridLayout( 4, 1) );        panel1left.add( jLabelExercise   );        panel1left.add( jTextFieldName );        panel1left.add( jLabelMuscle );        panel1left.add( jComboBoxMuscle );        panel1 = new JPanel();        panel1.setLayout( new BorderLayout() );        panel1.add( panel1left, BorderLayout.CENTER );        panel1.add( droppableIcon, BorderLayout.EAST );                panel2 = new JPanel();        panel2.setLayout( new BorderLayout() );        panel2.setBorder( BorderFactory.createEmptyBorder( 10,0,0,0  ));        jLabelComments.setMaximumSize( new Dimension(32000,32) );        panel2.add( jLabelComments, BorderLayout.NORTH );        panel2.add( jScrollPane1, BorderLayout.CENTER );        add( panel1, BorderLayout.NORTH );        add( panel2, BorderLayout.CENTER );        add( enabledCheckbox, BorderLayout.SOUTH );    }            // Variables declaration - do not modify    private javax.swing.JComboBox jComboBoxMuscle;    private javax.swing.JLabel jLabelComments;    private javax.swing.JLabel jLabelExercise;//    private javax.swing.JLabel jLabelIcon;    private javax.swing.JLabel jLabelMuscle;    private DroppableIcon droppableIcon;    private javax.swing.JScrollPane jScrollPane1;    private javax.swing.JTextArea jTextAreaComments;    private javax.swing.JTextField jTextFieldName;    private javax.swing.JCheckBox enabledCheckbox;    // End of variables declaration    }